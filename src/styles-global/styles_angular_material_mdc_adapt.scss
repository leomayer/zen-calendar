/* Collection of all the settings which are used 
   - for migration Angular Material 14=>15
   - general settings for the application which adapts Material settings
   (2023-02-06) 
*/
@use '@angular/material' as mat;
@use 'sass:map';
@import 'theme.scss';
@import 'styles_angular_material.scss';

$breakpoint-sm: 576px;
$breakpoint-md: 768px;
$breakpoint-lg: 992px;
$breakpoint-xl: 1200px;
$breakpoint-xxl: 1400px;

$breakpoint-l-sm: 575px;
$breakpoint-l-md: 767px;
$breakpoint-l-lg: 991px;
$breakpoint-l-xl: 1199px;
$breakpoint-l-xxl: 1399px;

:root {
	/* Letter spacing for labels in MatButtons */
	--mdc-typography-button-letter-spacing: 'normal';
	--documat-main-padding-container: 8px;
	--documat-main-card-margins: 16px;
	--documat-main-card-text-flow-margins: 16px;
	--documat-item-card-margins: 8px;
	--documat-button-margins: 8px;
	--documat-container-max-width: 1320px;

	--documat-source-content-height: 350px;
	--documat-icon-default-width: 24px;
	--documat-icon-spacer: 8px;
	--documat-icon-small-size: 16px;
	--documat-subscription-height: 22px;
	--documat-item-card-text-flow-tiny-margins: 4px;
	--documat-h4-margins: 0.25em;
	--documat-multiselect-width: 20ch;
	/* Angular Material Tab Height (=48px) plus border */
	--documat-tab-content-offset: 50px;

	--documat-item-dialog-mat-tab-height: 45vh;
	--documat-item-clipboard-result-height: 399px;
	--documat-item-clipboard-dialog-init-width: 80vw;
	--documat-item-clipboard-dialog-max-width: var(--documat-container-max-width);
	--documat-item-clipboard-dialog-max-height: 90vh;

	--documat-citation-dialog-init-width: 80vw;
	--documat-citation-dialog-init-height: unset;
	--documat-citation-dialog-max-width: var(--documat-container-max-width);
	--documat-citation-dialog-max-height: 90vh;
	--documat-citation-dialog-mat-tab-height: 50vh;
	--documat-citation-button-min-width: 32px;
	--documat-citation-icon-min-width: 18px;

	--documat-linkChapter-dialog-init-width: 60vw;
	--documat-linkChapter-dialog-init-height: 75vh;
	--documat-linkChapter-dialog-max-width: var(--documat-container-max-width);
	--documat-linkChapter-dialog-max-height: 90vh;

	/* START: will be calcualted dynamically  */
	--body-min-width: 600px;
	--citation-item-tiny-size: 100px;
	--citation-tiny-editor-offset: 100px;
	--listContainer-offset: 0px;
	/* END */
}

/* START: Colors */
$standardForecolor: black;
$standardBackcolor: white;
$documat-theme: (
	standard: (
		backColor: $standardBackcolor,
		foreColor: $standardForecolor,
		foreColorDisabled: mat.get-color-from-palette($greyPalette, 400),
		errorTextColor: mat.get-color-from-palette($redPalette, 500),
		primaryColor: mat.get-color-from-palette(mat.$indigo-palette, 500),
		clickColor: mat.get-color-from-palette($bluePalette, A700),
		menuActive: mat.get-color-from-palette($yellowPalette, A700),
		invalidColor: mat.get-color-from-palette($greyPalette, 600),
	),
	hint: (
		foreColor: mat.get-color-from-palette($greyPalette, 600),
		weight: normal,
		size: small,
	),
	change-tags: (
		del: (
			backColor: mat.get-color-from-palette($redPalette, 100),
			foreColor: mat.get-color-from-palette($bluegrayPalette, 900),
			text-decoration: line-through,
		),
		ins: (
			backColor: mat.get-color-from-palette($greenPalette, A100),
			foreColor: mat.get-color-from-palette($bluegrayPalette, 900),
			text-decoration: none,
		),
	),
	list: (
		backColor: mat.get-color-from-palette($greyPalette, 300),
	),
	card: (
		standard: (
			backColor: $standardBackcolor,
			foreColor: $standardForecolor,
		),
		title: (
			backColor: $standardBackcolor,
			foreColor: mat.get-color-from-palette($tealPalette, 600),
		),
		title-button: (
			backColor: mat.get-color-from-palette($tealPalette, 500),
		),
		permission: (
			backColor: $standardBackcolor,
			foreColor: mat.get-color-from-palette($tealPalette, 600),
		),
		wait4release-button: (
			backColor: mat.get-color-from-palette($purplePalette, default),
			foreColor: mat.get-color-from-palette($purplePalette, default-contrast),
		),
		info-button: (
			backColor: mat.get-color-from-palette($purplePalette, default),
			foreColor: mat.get-color-from-palette($purplePalette, default-contrast),
		),
		compare-select-button: (
			checked: (
				backColor: mat.get-color-from-palette($tealPalette, 500),
				foreColor: mat.get-color-from-palette($tealPalette, 500),
			),
			checked-focus: (
				backColor: mat.get-color-from-palette($tealPalette, 700),
				foreColor: mat.get-color-from-palette($tealPalette, 700),
			),
			checked-disabled: (
				backColor: mat.get-color-from-palette($tealPalette, 200),
				foreColor: mat.get-color-from-palette($tealPalette, 200),
			),
		),
	),
	bubble: (
		own-comment: (
			backColor: mat.get-color-from-palette($amberPalette, 100),
			foreColor: mat-contrast($amberPalette, 100),
			timestamp: mat.get-color-from-palette($greyPalette, 800),
		),
		other-comment: (
			backColor: mat.get-color-from-palette($greyPalette, 200),
			foreColor: mat-contrast($greyPalette, 200),
			timestamp: mat.get-color-from-palette($greyPalette, 800),
			role-label: mat.get-color-from-palette($bluegrayPalette, 600),
		),
	),
	dialog: (
		title: (
			backColor: mat.get-color-from-palette($primaryPalette, 500),
			foreColor: mat-contrast($primaryPalette, 500),
		),
	),
	nav-bar: (
		backColor: mat.get-color-from-palette($primaryPalette, 500),
		backColorDisabled: mat.get-color-from-palette($bluePalette, 100, 0.5),
		foreColor: mat-contrast($primaryPalette, 500),
		foreColorDisabled: mat-contrast($bluePalette, 100),
		borderSep: solid 1px mat.get-color-from-palette($primaryPalette, 200),
		activeColor: mat.get-color-from-palette($primaryPalette, 700),
		activeColorDisabled: mat.get-color-from-palette($bluePalette, 200, 0.5),
		activeForeColorDisabled: mat-contrast($primaryPalette, 500),
	),
	border: (
		basic: solid 1px mat.get-color-from-palette($greyPalette, 300),
		basic-2: solid 2px mat.get-color-from-palette($greyPalette, 300),
	),
	dnd-nodes: (
		drop-above: solid var(--documat-item-card-margins) mat.get-color-from-palette($bluePalette, 600),
		drop-below: solid var(--documat-item-card-margins) mat.get-color-from-palette($bluePalette, 600),
		drop-center: (
			backColor: mat.get-color-from-palette($greyPalette, 400),
			foreColor: mat-contrast($greyPalette, 400),
		),
		drag-start: (
			background-color: mat.get-color-from-palette($bluePalette, 800),
			color: mat.get-color-from-palette($greyPalette, 200),
		),
		drop-message: (
			message: (
				backColor: mat.get-color-from-palette($bluegrayPalette, 50, 0.8),
				foreColor: mat-contrast($bluegrayPalette, 50),
			),
			backColor: mat.get-color-from-palette($greyPalette, 600, 0.3),
		),
	),
	spotlight: (
		active: (
			worklist: mat.get-color-from-palette($primaryPalette, 500),
			ref-source: mat.get-color-from-palette($greenPalette, 100),
			role: mat.get-color-from-palette($tealPalette, 100),
		),
		changed: (
			role: solid var(--documat-item-card-margins) mat.get-color-from-palette($greenPalette, 400),
			ref-card: solid var(--documat-item-card-margins) mat.get-color-from-palette($lightBluePalette, 700),
		),
		menuTitle: (
			backColor: mat.get-color-from-palette($redPalette, 800),
			foreColor: mat-contrast($redPalette, 800),
		),
		noneSelection: (
			backColor: mat.get-color-from-palette($purplePalette, 50),
			foreColor: mat.get-color-from-palette($purplePalette, 900),
		),
		released-changes: (
			backColor: mat.get-color-from-palette($yellowPalette, 100),
			foreColor: mat-contrast($yellowPalette, 100),
		),
		active-menu: (
			backColor: mat.get-color-from-palette($bluePalette, 50),
			foreColor: mat-contrast($bluePalette, 50),
		),
		permission-table-subheader: (
			backColor: mat.get-color-from-palette($bluePalette, 50),
			foreColor: mat-contrast($bluePalette, 50),
		),
		tree-node-selected: (
			backColor: mat.get-color-from-palette($lightBluePalette, 50),
			foreColor: mat-contrast($lightBluePalette, 50),
		),
	),
	table: (
		padding: (
			column: 8px,
		),
		hover: (
			backColor: mat.get-color-from-palette($greyPalette, 100),
			foreColor: mat-contrast($greyPalette, 100),
			odd-child: (
				backColor: mat.get-color-from-palette($greyPalette, 300),
				foreColor: mat-contrast($greyPalette, 300),
			),
			highlight: (
				backColor: mat.get-color-from-palette($limePalette, 50),
				foreColor: mat-contrast($limePalette, 50),
			),
		),
		standard: (
			odd-child: (
				backColor: mat.get-color-from-palette($greyPalette, 200),
				foreColor: mat-contrast($greyPalette, 200),
			),
			highlight: (
				backColor: mat.get-color-from-palette($limePalette, 100),
				foreColor: mat-contrast($greyPalette, 100),
			),
		),
	),
	chip-option: (
		selected: (
			backColor: mat.get-color-from-palette($primaryPalette, 200),
			foreColor: mat.get-color-from-palette($primaryPalette, 200),
		),
		ignore: (
			backColor: mat.get-color-from-palette($accentPalette, 100),
			foreColor: mat.get-contrast-color-from-palette($accentPalette, 100),
		),
		emphasis: (
			backColor: mat.get-color-from-palette($greyPalette, 400),
			foreColor: mat.get-contrast-color-from-palette($greyPalette, 400),
		),
		item-details: (
			backColor: mat.get-color-from-palette($greenPalette, 900),
			foreColor: mat.get-contrast-color-from-palette($greenPalette, 900),
		),
		badge-counter: (
			backColor: mat.get-color-from-palette($tealPalette, 700),
			foreColor: mat.get-contrast-color-from-palette($tealPalette, 700),
		),
		invalid: (
			backColor: mat.get-color-from-palette($bluegrayPalette, 50),
			foreColor: mat.get-color-from-palette($bluegrayPalette, 600),
		),
	),
	icon: (
		permitted: (
			standard: mat.get-color-from-palette($greenPalette, 800),
			revision_requested: mat.get-color-from-palette($redPalette, A700),
			stable: $standardForecolor,
		),
		ref-attached: (
			foreColor: mat.get-color-from-palette($greyPalette, 600),
		),
		ref-merge: (
			backColor: mat.get-color-from-palette($purplePalette, 200),
			foreColor: mat-contrast($purplePalette, 200),
		),
	),
	ref-module: (
		icon: (
			/** used as well in the title */ standard: mat.get-color-from-palette($tealPalette, 500),
			warn: mat.get-color-from-palette($limePalette, 800),
			archive: mat.get-color-from-palette($bluePalette, 700),
			archive-hover: mat.get-color-from-palette($bluePalette, 400),
			alert: mat.get-color-from-palette($redPalette, 800),
			tag-rank: mat.get-color-from-palette($primaryPalette, 500),
		),
		citation: (
			card-backColor: mat.get-color-from-palette($greyPalette, 100),
			title-foreColor: mat.get-color-from-palette($tealPalette, 700),
		),
		predecessor: (
			backColor: mat.get-color-from-palette($greenPalette, A100, 0.5),
			radio-select: mat.get-color-from-palette($tealPalette, 700),
		),
		successor: (
			backColor: mat.get-color-from-palette($bluegrayPalette, 200),
			foreColor: mat.get-contrast-color-from-palette($bluegrayPalette, 200),
		),
	),
	mat-btn-toggle: (
		standard: (
			backColor: mat.get-color-from-palette($primaryPalette),
			foreColor: mat.get-color-from-palette($primaryPalette, default-contrast),
			disabled: mat.get-color-from-palette($primaryPalette, 200),
			checked: mat.get-color-from-palette($primaryPalette, 400),
		),
		purple: (
			backColor: mat.get-color-from-palette($purplePalette, 700),
			disabled: mat.get-color-from-palette($purplePalette, 200),
			checked: mat.get-color-from-palette($purplePalette, 400),
		),
	),
	snack-container: (
		info: (
			backColor: mat.get-color-from-palette($greenPalette, 50),
			foreColor: mat.get-contrast-color-from-palette($greenPalette, 50),
			titleColor: mat.get-color-from-palette($greenPalette, 800),
		),
		error: (
			backColor: mat.get-color-from-palette($redPalette, 50),
			foreColor: mat.get-contrast-color-from-palette($redPalette, 50),
			titleColor: mat.get-color-from-palette($redPalette, 800),
		),
	),
	split-pane: (
		disabled: (
			backColor: rgba($standardForecolor, 0.1),
		),
	),
	network-broken: (
		animation: (
			init: mat.get-color-from-palette($redPalette, A700),
			level: (
				'0%': mat.get-color-from-palette($redPalette, A700),
				'33%': mat.get-color-from-palette($yellowPalette, A700),
				'66%': mat.get-color-from-palette($cyanPalette, A200),
			),
		),
	),
);
/* END: Colors */

/* set the colors from the documat theme  - fetch the map with the values */
@mixin documat-color($level1, $level2: '', $level3: '') {
	@if $level3 != '' {
		@include fillColor(map-get($documat-theme, $level1, $level2, $level3));
	} @else {
		@if $level2!= '' {
			@include fillColor(map-get($documat-theme, $level1, $level2));
		} @else {
			@include fillColor(map-get($documat-theme, $level1));
		}
	}
}
/* set the colors from the documat theme  - extract back- and foreground colors from the and apply */
@mixin fillColor($colorMap) {
	background-color: map-get($colorMap, backColor);
	color: map-get($colorMap, foreColor);
}
@mixin fillColorImportant($colorMap) {
	background-color: map-get($colorMap, backColor) !important;
	color: map-get($colorMap, foreColor) !important;
}
